var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { createMultipleQuestionSurvey, createSingleQuestionSurvey, setTextColors, showQuestion, style, } from './surveys/surveys-utils';
import { document as _document, window as _window } from '../utils/globals';
import { addCancelListeners, createThankYouMessage } from './surveys';
// We cast the types here which is dangerous but protected by the top level generateSurveys call
var document = _document;
var window = _window;
var SurveysWidget = /** @class */ (function () {
    function SurveysWidget(instance, survey, widget) {
        this.instance = instance;
        this.survey = survey;
        this.shadow = this.createWidgetShadow();
        this.widget = widget;
    }
    SurveysWidget.prototype.createWidget = function () {
        var _this = this;
        var _a, _b, _c, _d, _e, _f;
        var surveyPopup = this.createSurveyForWidget();
        var widget;
        if (((_a = this.survey.appearance) === null || _a === void 0 ? void 0 : _a.widgetType) === 'selector') {
            // user supplied button
            widget = document.querySelector(this.survey.appearance.widgetSelector || '');
        }
        else if (((_b = this.survey.appearance) === null || _b === void 0 ? void 0 : _b.widgetType) === 'tab') {
            widget = this.createTabWidget();
        }
        else if (((_c = this.survey.appearance) === null || _c === void 0 ? void 0 : _c.widgetType) === 'button') {
            widget = this.createButtonWidget();
        }
        this.widget = widget;
        if (((_d = this.survey.appearance) === null || _d === void 0 ? void 0 : _d.widgetType) !== 'selector') {
            this.shadow.appendChild(this.widget);
        }
        setTextColors(this.shadow);
        // reposition survey next to widget when opened
        if (surveyPopup && ((_e = this.survey.appearance) === null || _e === void 0 ? void 0 : _e.widgetType) === 'tab' && this.widget) {
            surveyPopup.style.bottom = 'auto';
            surveyPopup.style.borderBottom = "1.5px solid ".concat(((_f = this.survey.appearance) === null || _f === void 0 ? void 0 : _f.borderColor) || '#c9c6c6');
            surveyPopup.style.borderRadius = '10px';
            var widgetPos = this.widget.getBoundingClientRect();
            surveyPopup.style.top = '50%';
            surveyPopup.style.left = "".concat(widgetPos.right - 360, "px");
        }
        if (this.widget) {
            this.widget.addEventListener('click', function () {
                if (surveyPopup) {
                    surveyPopup.style.display = surveyPopup.style.display === 'none' ? 'block' : 'none';
                }
            });
            this.widget.setAttribute('PHWidgetSurveyClickListener', 'true');
            if (surveyPopup) {
                window.addEventListener('PHSurveySent', function () {
                    var _a, _b;
                    if (surveyPopup) {
                        surveyPopup.style.display = 'none';
                    }
                    var tabs = (_b = (_a = document === null || document === void 0 ? void 0 : document.getElementsByClassName("PostHogWidget".concat(_this.survey.id))[0]) === null || _a === void 0 ? void 0 : _a.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelectorAll('.tab');
                    tabs.forEach(function (tab) { return (tab.style.display = 'none'); });
                    showQuestion(0, _this.survey.id, _this.survey.type);
                });
            }
        }
    };
    SurveysWidget.prototype.createTabWidget = function () {
        var _a;
        // make a permanent tab widget
        var tab = document.createElement('div');
        var html = "\n            <div class=\"ph-survey-widget-tab auto-text-color\">\n                <div class=\"ph-survey-widget-tab-icon\">\n                </div>\n                ".concat(((_a = this.survey.appearance) === null || _a === void 0 ? void 0 : _a.widgetLabel) || '', "\n            </div>\n            ");
        tab.innerHTML = html;
        return tab;
    };
    SurveysWidget.prototype.createButtonWidget = function () {
        // make a permanent button widget
        var label = 'Feedback :)';
        var button = document.createElement('button');
        var html = "\n            <div class=\"ph-survey-widget-button auto-text-color\">\n                <div class=\"ph-survey-widget-button-icon\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                </div>\n                ".concat(label, "\n            </div>\n            ");
        button.innerHTML = html;
        return button;
    };
    SurveysWidget.prototype.createSurveyForWidget = function () {
        var e_1, _a;
        var _this = this;
        var _b, _c, _d, _e;
        var surveyStyleSheet = style(this.survey.id, this.survey.appearance);
        this.shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }));
        var widgetSurvey = this.survey.questions.length > 1
            ? createMultipleQuestionSurvey(this.instance, this.survey)
            : createSingleQuestionSurvey(this.instance, this.survey, this.survey.questions[0]);
        if (widgetSurvey) {
            widgetSurvey.style.display = 'none';
            addCancelListeners(this.instance, widgetSurvey, this.survey.id, this.survey.name);
            if ((_b = this.survey.appearance) === null || _b === void 0 ? void 0 : _b.whiteLabel) {
                var allBrandingElements = widgetSurvey.getElementsByClassName('footer-branding');
                try {
                    for (var allBrandingElements_1 = __values(allBrandingElements), allBrandingElements_1_1 = allBrandingElements_1.next(); !allBrandingElements_1_1.done; allBrandingElements_1_1 = allBrandingElements_1.next()) {
                        var brandingElement = allBrandingElements_1_1.value;
                        ;
                        brandingElement.style.display = 'none';
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (allBrandingElements_1_1 && !allBrandingElements_1_1.done && (_a = allBrandingElements_1.return)) _a.call(allBrandingElements_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            this.shadow.appendChild(widgetSurvey);
            if (this.survey.questions.length > 1) {
                var currentQuestion = 0;
                showQuestion(currentQuestion, this.survey.id, this.survey.type);
            }
            setTextColors(this.shadow);
            window.dispatchEvent(new Event('PHSurveyShown'));
            this.instance.capture('survey shown', {
                $survey_name: this.survey.name,
                $survey_id: this.survey.id,
                sessionRecordingUrl: (_d = (_c = this.instance).get_session_replay_url) === null || _d === void 0 ? void 0 : _d.call(_c),
            });
            if ((_e = this.survey.appearance) === null || _e === void 0 ? void 0 : _e.displayThankYouMessage) {
                window.addEventListener('PHSurveySent', function () {
                    var e_2, _a;
                    var _b, _c, _d;
                    var thankYouElement = createThankYouMessage(_this.survey);
                    if (thankYouElement && ((_b = _this.survey.appearance) === null || _b === void 0 ? void 0 : _b.widgetType) === 'tab') {
                        thankYouElement.style.bottom = 'auto';
                        thankYouElement.style.borderBottom = "1.5px solid ".concat(((_c = _this.survey.appearance) === null || _c === void 0 ? void 0 : _c.borderColor) || '#c9c6c6');
                        thankYouElement.style.borderRadius = '10px';
                        var widgetPos = _this.widget.getBoundingClientRect();
                        thankYouElement.style.top = '50%';
                        thankYouElement.style.left = "".concat(widgetPos.right - 400, "px");
                    }
                    _this.shadow.appendChild(thankYouElement);
                    // reposition thank you box next to widget when opened
                    var cancelButtons = thankYouElement.querySelectorAll('.form-cancel, .form-submit');
                    try {
                        for (var cancelButtons_1 = __values(cancelButtons), cancelButtons_1_1 = cancelButtons_1.next(); !cancelButtons_1_1.done; cancelButtons_1_1 = cancelButtons_1.next()) {
                            var button = cancelButtons_1_1.value;
                            button.addEventListener('click', function () {
                                thankYouElement.remove();
                            });
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (cancelButtons_1_1 && !cancelButtons_1_1.done && (_a = cancelButtons_1.return)) _a.call(cancelButtons_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    var countdownEl = thankYouElement.querySelector('.thank-you-message-countdown');
                    if (((_d = _this.survey.appearance) === null || _d === void 0 ? void 0 : _d.autoDisappear) && countdownEl) {
                        var count_1 = 3;
                        countdownEl.textContent = "(".concat(count_1, ")");
                        var countdown_1 = setInterval(function () {
                            count_1 -= 1;
                            if (count_1 <= 0) {
                                clearInterval(countdown_1);
                                thankYouElement.remove();
                                return;
                            }
                            countdownEl.textContent = "(".concat(count_1, ")");
                        }, 1000);
                    }
                    setTextColors(_this.shadow);
                });
            }
        }
        return widgetSurvey;
    };
    SurveysWidget.prototype.createWidgetShadow = function () {
        var _a;
        var div = document.createElement('div');
        div.className = "PostHogWidget".concat(this.survey.id);
        var shadow = div.attachShadow({ mode: 'open' });
        var widgetStyleSheet = "\n            .ph-survey-widget-tab {\n                position: fixed;\n                top: 50%;\n                right: 0;\n                background: ".concat(((_a = this.survey.appearance) === null || _a === void 0 ? void 0 : _a.widgetColor) || '#e0a045', ";\n                color: white;\n                transform: rotate(-90deg) translate(0, -100%);\n                transform-origin: right top;\n                min-width: 40px;\n                padding: 8px 12px;\n                font-weight: 500;\n                border-radius: 3px 3px 0 0;\n                text-align: center;\n                cursor: pointer;\n                z-index: 9999999;\n            }\n            .ph-survey-widget-tab:hover {\n                padding-bottom: 13px;\n            }\n            .ph-survey-widget-button {\n                position: fixed;\n            }\n        ");
        shadow.append(Object.assign(document.createElement('style'), { innerText: widgetStyleSheet }));
        document.body.appendChild(div);
        return shadow;
    };
    return SurveysWidget;
}());
export { SurveysWidget };
//# sourceMappingURL=surveys-widget.js.map