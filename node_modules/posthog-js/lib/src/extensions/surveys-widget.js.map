{"version":3,"file":"surveys-widget.js","sourceRoot":"","sources":["../../../src/extensions/surveys-widget.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostHog } from '../posthog-core'\nimport { Survey } from '../posthog-surveys-types'\nimport {\n    createMultipleQuestionSurvey,\n    createSingleQuestionSurvey,\n    setTextColors,\n    showQuestion,\n    style,\n} from './surveys/surveys-utils'\nimport { document as _document, window as _window } from '../utils/globals'\nimport { addCancelListeners, createThankYouMessage } from './surveys'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst document = _document as Document\nconst window = _window as Window & typeof globalThis\n\nexport class SurveysWidget {\n    instance: PostHog\n    survey: Survey\n    shadow: any\n    widget?: any\n\n    constructor(instance: PostHog, survey: Survey, widget?: any) {\n        this.instance = instance\n        this.survey = survey\n        this.shadow = this.createWidgetShadow()\n        this.widget = widget\n    }\n\n    createWidget(): void {\n        const surveyPopup = this.createSurveyForWidget()\n        let widget\n        if (this.survey.appearance?.widgetType === 'selector') {\n            // user supplied button\n            widget = document.querySelector(this.survey.appearance.widgetSelector || '')\n        } else if (this.survey.appearance?.widgetType === 'tab') {\n            widget = this.createTabWidget()\n        } else if (this.survey.appearance?.widgetType === 'button') {\n            widget = this.createButtonWidget()\n        }\n        this.widget = widget\n        if (this.survey.appearance?.widgetType !== 'selector') {\n            this.shadow.appendChild(this.widget)\n        }\n        setTextColors(this.shadow)\n        // reposition survey next to widget when opened\n        if (surveyPopup && this.survey.appearance?.widgetType === 'tab' && this.widget) {\n            surveyPopup.style.bottom = 'auto'\n            surveyPopup.style.borderBottom = `1.5px solid ${this.survey.appearance?.borderColor || '#c9c6c6'}`\n            surveyPopup.style.borderRadius = '10px'\n            const widgetPos = this.widget.getBoundingClientRect()\n            surveyPopup.style.top = '50%'\n            surveyPopup.style.left = `${widgetPos.right - 360}px`\n        }\n        if (this.widget) {\n            this.widget.addEventListener('click', () => {\n                if (surveyPopup) {\n                    surveyPopup.style.display = surveyPopup.style.display === 'none' ? 'block' : 'none'\n                }\n            })\n            this.widget.setAttribute('PHWidgetSurveyClickListener', 'true')\n            if (surveyPopup) {\n                window.addEventListener('PHSurveySent', () => {\n                    if (surveyPopup) {\n                        surveyPopup.style.display = 'none'\n                    }\n                    const tabs = document\n                        ?.getElementsByClassName(`PostHogWidget${this.survey.id}`)[0]\n                        ?.shadowRoot?.querySelectorAll('.tab') as NodeListOf<HTMLElement>\n                    tabs.forEach((tab) => (tab.style.display = 'none'))\n                    showQuestion(0, this.survey.id, this.survey.type)\n                })\n            }\n        }\n    }\n\n    createTabWidget(): HTMLDivElement {\n        // make a permanent tab widget\n        const tab = document.createElement('div')\n        const html = `\n            <div class=\"ph-survey-widget-tab auto-text-color\">\n                <div class=\"ph-survey-widget-tab-icon\">\n                </div>\n                ${this.survey.appearance?.widgetLabel || ''}\n            </div>\n            `\n\n        tab.innerHTML = html\n        return tab\n    }\n\n    createButtonWidget(): HTMLButtonElement {\n        // make a permanent button widget\n        const label = 'Feedback :)'\n        const button = document.createElement('button')\n        const html = `\n            <div class=\"ph-survey-widget-button auto-text-color\">\n                <div class=\"ph-survey-widget-button-icon\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\">\n                </div>\n                ${label}\n            </div>\n            `\n        button.innerHTML = html\n        return button\n    }\n\n    private createSurveyForWidget(): HTMLFormElement | null {\n        const surveyStyleSheet = style(this.survey.id, this.survey.appearance)\n        this.shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }))\n        const widgetSurvey =\n            this.survey.questions.length > 1\n                ? createMultipleQuestionSurvey(this.instance, this.survey)\n                : createSingleQuestionSurvey(this.instance, this.survey, this.survey.questions[0])\n        if (widgetSurvey) {\n            widgetSurvey.style.display = 'none'\n            addCancelListeners(this.instance, widgetSurvey as HTMLFormElement, this.survey.id, this.survey.name)\n            if (this.survey.appearance?.whiteLabel) {\n                const allBrandingElements = widgetSurvey.getElementsByClassName('footer-branding')\n                for (const brandingElement of allBrandingElements) {\n                    ;(brandingElement as HTMLAnchorElement).style.display = 'none'\n                }\n            }\n            this.shadow.appendChild(widgetSurvey)\n            if (this.survey.questions.length > 1) {\n                const currentQuestion = 0\n                showQuestion(currentQuestion, this.survey.id, this.survey.type)\n            }\n            setTextColors(this.shadow)\n            window.dispatchEvent(new Event('PHSurveyShown'))\n            this.instance.capture('survey shown', {\n                $survey_name: this.survey.name,\n                $survey_id: this.survey.id,\n                sessionRecordingUrl: this.instance.get_session_replay_url?.(),\n            })\n            if (this.survey.appearance?.displayThankYouMessage) {\n                window.addEventListener('PHSurveySent', () => {\n                    const thankYouElement = createThankYouMessage(this.survey)\n                    if (thankYouElement && this.survey.appearance?.widgetType === 'tab') {\n                        thankYouElement.style.bottom = 'auto'\n                        thankYouElement.style.borderBottom = `1.5px solid ${\n                            this.survey.appearance?.borderColor || '#c9c6c6'\n                        }`\n                        thankYouElement.style.borderRadius = '10px'\n                        const widgetPos = this.widget.getBoundingClientRect()\n                        thankYouElement.style.top = '50%'\n                        thankYouElement.style.left = `${widgetPos.right - 400}px`\n                    }\n                    this.shadow.appendChild(thankYouElement)\n                    // reposition thank you box next to widget when opened\n                    const cancelButtons = thankYouElement.querySelectorAll('.form-cancel, .form-submit')\n                    for (const button of cancelButtons) {\n                        button.addEventListener('click', () => {\n                            thankYouElement.remove()\n                        })\n                    }\n                    const countdownEl = thankYouElement.querySelector('.thank-you-message-countdown')\n                    if (this.survey.appearance?.autoDisappear && countdownEl) {\n                        let count = 3\n                        countdownEl.textContent = `(${count})`\n                        const countdown = setInterval(() => {\n                            count -= 1\n                            if (count <= 0) {\n                                clearInterval(countdown)\n                                thankYouElement.remove()\n                                return\n                            }\n                            countdownEl.textContent = `(${count})`\n                        }, 1000)\n                    }\n                    setTextColors(this.shadow)\n                })\n            }\n        }\n        return widgetSurvey as HTMLFormElement\n    }\n\n    private createWidgetShadow() {\n        const div = document.createElement('div')\n        div.className = `PostHogWidget${this.survey.id}`\n        const shadow = div.attachShadow({ mode: 'open' })\n        const widgetStyleSheet = `\n            .ph-survey-widget-tab {\n                position: fixed;\n                top: 50%;\n                right: 0;\n                background: ${this.survey.appearance?.widgetColor || '#e0a045'};\n                color: white;\n                transform: rotate(-90deg) translate(0, -100%);\n                transform-origin: right top;\n                min-width: 40px;\n                padding: 8px 12px;\n                font-weight: 500;\n                border-radius: 3px 3px 0 0;\n                text-align: center;\n                cursor: pointer;\n                z-index: 9999999;\n            }\n            .ph-survey-widget-tab:hover {\n                padding-bottom: 13px;\n            }\n            .ph-survey-widget-button {\n                position: fixed;\n            }\n        `\n        shadow.append(Object.assign(document.createElement('style'), { innerText: widgetStyleSheet }))\n        document.body.appendChild(div)\n        return shadow\n    }\n}\n"]}